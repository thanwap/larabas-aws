Description: This template deploys an ECS cluster to the provided VPC and subnets using an Auto Scaling Group

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  InstanceType:
    Description: Which instance type should we use to build the ECS cluster?
    Type: String
    Default: c4.large

  ClusterSize:
    Description: How many ECS hosts do you want to initially deploy?
    Type: Number
    Default: 4

  VPC:
    Description: Choose which VPC this ECS cluster should be deployed to
    Type: AWS::EC2::VPC::Id

  PublicSubnets:
    Description: Choose which subnets the Application Load Balancer should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  LBSecurityGroup:
    Description: Select the Security Group to apply to the Application Load Balancer
    Type: AWS::EC2::SecurityGroup::Id

  LBCertificateArn:
    Description: AWS ARN of the SSL certificate to be used by the ALB
    Type: String

  PrivateSubnets:
    Description: Choose which subnets this ECS cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  ECSSecurityGroup:
    Description: Select the Security Group to use for the ECS cluster hosts
    Type: AWS::EC2::SecurityGroup::Id

  S3BucketName:
    Description: Name of a S3 Bucket to be granted access to
    Type: String

  CloudFrontOAI:
    Description: Origin Access Identity to create via the CLI
    Type: String

  CFCertificateArn:
    Description: CertificateArn to create via the CLI. Must be in region us-east-1 to work with CloudFront
    Type: String

  CDNAlias:
    Description: DNS Alias for your CloudFront distribution (for example files.dekcrack.com)
    Type: String

  # KmsKey:
  #   Description: KmsKey id for create ECSLaunchConfiguration
  #   type: String

Mappings:
  # These are the latest ECS optimized AMIs as of August 2017:
  #
  #   amzn-ami-2017.03.f-amazon-ecs-optimized
  #   ECS agent:    1.14.4
  #   Docker:       17.03.2-ce
  #   ecs-init:     1.14.4-1
  #
  # You can find the latest available on this page of our documentation:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
  # (note the AMI identifier is region specific)

  AWSRegionToAMI:
    us-east-2:
      AMI: ami-1c002379
    us-east-1:
      AMI: ami-9eb4b1e5
    us-west-2:
      AMI: ami-1d668865
    us-west-1:
      AMI: ami-4a2c192a
    eu-west-2:
      AMI: ami-cb1101af
    eu-west-1:
      AMI: ami-8fcc32f6
    eu-central-1:
      AMI: ami-0460cb6b
    ap-northeast-1:
      AMI: ami-b743bed1
    ap-southeast-2:
      AMI: ami-c1a6bda2
    ap-southeast-1:
      AMI: ami-9d1f7efe
    ca-central-1:
      AMI: ami-b677c9d2

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EnvironmentName

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnets
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      MinSize: !Ref ClusterSize
      MaxSize: !Ref ClusterSize
      DesiredCapacity: !Ref ClusterSize
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} ECS host
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref ECSSecurityGroup
      IamInstanceProfile: !Ref ECSInstanceProfile
      KeyName: !Ref AWS::StackName
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum update -y
          yum install -y aws-cfn-bootstrap aws-cli go
          echo '{ "credsStore": "ecr-login" }' > ~/.docker/config.json
          go get -u github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login
          cd /home/ec2-user/go/src/github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login
          go build
          export PATH=$PATH:/home/ec2-user/go/bin
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

  # This IAM Role is attached to all of the ECS hosts. It is based on the default role
  # published here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
  #
  # You can add other IAM policy statements here to allow access from your ECS hosts
  # to other AWS services. Please note that this role will be used by ALL containers
  # running on the ECS host.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                    "Service": "ec2.amazonaws.com"
                }
            }]
        }
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
      Policies:
        - PolicyName: ecs-service
          PolicyDocument: |
            {
                "Statement": [{
                    "Effect": "Allow",
                    "Action": [
                        "ecs:CreateCluster",
                        "ecs:DeregisterContainerInstance",
                        "ecs:DiscoverPollEndpoint",
                        "ecs:Poll",
                        "ecs:RegisterContainerInstance",
                        "ecs:StartTelemetrySession",
                        "ecs:Submit*",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:BatchGetImage",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:GetAuthorizationToken"
                    ],
                    "Resource": "*"
                }]
            }
        - PolicyName: ec2-s3-write-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketAcl
                  - s3:PutObjectTagging
                  - s3:ListBucket
                  - s3:PutObjectAcl
                Resource: !Sub arn:aws:s3:::${S3BucketName}/*
        - PolicyName: ec2-cloudwatch-write-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: "*"
        - PolicyName: sqs-read-write-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: !GetAtt Queue.Arn

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  ECR:
    Type: AWS::ECR::Repository
    Properties:
#      RepositoryName: !Sub ${AWS::StackName}-nginx
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/${ECSRole}
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref EnvironmentName
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref LBSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  LoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  LoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref LBCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  # We define a default target group here, as this is a mandatory Parameters
  # when creating an Application Load Balancer Listener. This is not used, instead
  # a target group is created per-service in each service template (../services/*)
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-default
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP

  HTTPCodeTarget5XXTooHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Application load balancer receives 5XX HTTP status codes from targets
      Namespace: AWS/ApplicationELB
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
        - Ref: AlarmTopic
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName

  #    CloudFrontDistribution:
  #        Type: AWS::CloudFront::Distribution
  #        Properties:
  #            DistributionConfig:
  #                Origins:
  #                    - DomainName: !Ref S3BucketDNSName
  #                      Id: myS3Origin
  #                      S3OriginConfig:
  #                          OriginAccessIdentity: !Ref CloudFrontOAI
  #                Enabled: 'true'
  #                Aliases:
  #                    - !Ref CDNAlias
  #                DefaultCacheBehavior:
  #                    Compress: 'true'
  #                    AllowedMethods:
  #                        - GET
  #                        - HEAD
  #                        - OPTIONS
  #                    TargetOriginId: myS3Origin
  #                    ForwardedValues:
  #                        QueryString: 'false'
  #                        Cookies:
  #                           Forward: none
  #                    ViewerProtocolPolicy: redirect-to-https
  #                ViewerCertificate:
  #                    AcmCertificateArn: !Ref CFCertificateArn
  #                    SslSupportMethod: 'sni-only'

  Queue:
    Type: AWS::SQS::Queue

  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: thecrack.digital@thecrackdigital.com
          Protocol: email

  QueueDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if queue depth grows beyond 10 messages
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt Queue.QueueName
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: AlarmTopic
      InsufficientDataActions:
        - Ref: AlarmTopic

  #    ScaleUpPolicy:
  #        Type: AWS::AutoScaling::ScalingPolicy
  #        Properties:
  #            AdjustmentType: ChangeInCapacity
  #            AutoScalingGroupName: !Ref ECSAutoScalingGroup
  #            Cooldown: '1'
  #            ScalingAdjustment: '1'

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: "1"
      Statistic: Average
      Threshold: "50"
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: "60"
#      AlarmActions:
#        - Ref: ScaleUpPolicy
      AlarmActions:
        - Ref: AlarmTopic
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ECSAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

#    CPUUtilizationLowAlarm:
#        Type: AWS::CloudWatch::Alarm
#        Properties:
#            AlarmDescription: Service is wasting CPU
#            Namespace: 'AWS/ECS'
#            Dimensions:
#                - Name: ClusterName
#            Value:
#              'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'
#                - Name: ServiceName
#            Value: !GetAtt 'Service.Name'
#            MetricName: CPUUtilization
#            ComparisonOperator: LessThanThreshold
#            Statistic: Average
#            Period: 300
#            EvaluationPeriods: 3
#            Threshold: 30
#            AlarmActions:
#                - !Ref ScaleDownPolicy

Outputs:
  Cluster:
    Description: A reference to the ECS cluster
    Value: !Ref ECSCluster

  ECR:
    Description: ECR
    Value: !Ref ECR

  QueueName:
    Description: SQS Queue name
    Value: !GetAtt Queue.QueueName

  LoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref LoadBalancer

  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !GetAtt LoadBalancer.DNSName

  ListenerHTTP:
    Description: A reference to a port 80 listener
    Value: !Ref LoadBalancerListenerHTTP

  ListenerHTTPS:
    Description: A reference to a port 443 listener
    Value: !Ref LoadBalancerListenerHTTPS
